using System;
using System.Linq;
using System.Reflection;
using AbstractResource;
using AbstractResource.Attributes;
using AbstractResource.Connects;
using AdminPanel.JsonBuilder;
using Database;
using Database.Models.Bans;
using Database.Models.Realty;
using GTANetworkAPI;
using NAPIExtensions;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace AdminPanel
{
    public class AdminPanel : AltAbstractResource
    {
        [RemoteEvent(AdminPanelEvents.GetAvailableMethodsFromCef)]
        public void OnGetAvailableMethodsEvent(Player player)
        {
            string actionsJson = AdminActionsJsonBuilder.GetAdminActions(
                GetType().GetMethods(),
                method => PlayerHasAccessToClassMember(player, method)
            );
            CefConnect.TriggerRaw(player, AdminPanelEvents.GetAvailableMethodsFromCef + "Answered", actionsJson);
        }

        #region Player

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerCommonMethods, true)]
        [RemoteEvent(AdminPanelEvents.GetOnlineCharactersFromCef)]
        public void OnGetOnlineCharactersEvent(Player admin) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var simplifiedCharactersData = NAPI.Pools.GetActiveCharacters()
                        .Select(character => new { character.StaticId, character.Fullname });
                    var settings = new JsonSerializerSettings
                    {
                        ContractResolver = new DefaultContractResolver
                            { NamingStrategy = new CamelCaseNamingStrategy() },
                        Formatting = Formatting.Indented
                    };
                    string charactersJson = JsonConvert.SerializeObject(simplifiedCharactersData, settings);
                    CefConnect.TriggerRaw(admin, AdminPanelEvents.GetOnlineCharactersFromCef + "Answered",
                        charactersJson);
                    LogPlayer(admin, "GetOnlineCharacters", "Request players list");
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerCommonMethods, true)]
        [RemoteEvent(AdminPanelEvents.GetCharacterMainInfoFromCef)]
        public void OnGetCharacterMainInfoEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var character = AltContext.GetCharacter(staticId);
                    var characterData = new
                    {
                        character.Fullname,
                        character.Age,
                        Ip = ((Player)character).Address,
                        Login = character.Account.Username,
                        character.Account.SocialClubId,
                        InGameTime = character.InGameSeconds,
                        AccountInGameTime = character.Account.Characters.Select(c => c.InGameSeconds).Sum(),
                        LastConnectionTime =
                            new DateTimeOffset(character.Account.LastConnectionTime).ToUnixTimeSeconds(),
                        CurrentPosition = ((Player)character).Position,
                        ((Player)character).Health,
                        ((Player)character).Armor,
                        ((Player)character).GetAccessLevels().AdminLevel,
                        ((Player)character).GetAccessLevels().VipLevel
                    };
                    var settings = new JsonSerializerSettings
                    {
                        ContractResolver = new DefaultContractResolver
                            { NamingStrategy = new CamelCaseNamingStrategy() },
                        Formatting = Formatting.Indented
                    };
                    string jsonCharacter = JsonConvert.SerializeObject(characterData, settings);
                    CefConnect.TriggerRaw(admin, AdminPanelEvents.GetCharacterMainInfoFromCef + "Answered",
                        jsonCharacter);
                    LogPlayer(admin, "GetCharacterMainInfo", $"Request player data with static ID {staticId}");
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerCondition)]
        [RemoteEvent(AdminPanelEvents.KillPlayerFromCef)]
        public void OnKillPlayerEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var player = (Player)AltContext.GetCharacter(staticId);
                    NAPI.Task.Run(() => player.Health = 0);
                    LogPlayer(admin, "KillPlayerAsAdmin", $"Kill player with static ID {staticId}");
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerCondition)]
        [RemoteEvent(AdminPanelEvents.ResurrectPlayerFromCef)]
        public void OnResurrectPlayerEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var character = AltContext.GetCharacter(staticId);
                    character.ResetTimeToReborn();
                    LogPlayer(admin, "ResurrectPlayer", $"Resurrect player with static ID {staticId}");
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerCondition)]
        [RemoteEvent(AdminPanelEvents.SetPlayerHealthFromCef)]
        public void OnSetPlayerHealthEvent(Player admin, long staticId, int health = 100) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var player = (Player)AltContext.GetCharacter(staticId);
                    NAPI.Task.Run(() => player.Health = health);
                    LogPlayer(admin, "SetHealth", $"Set health to player with static ID {staticId}");
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerCondition)]
        [RemoteEvent(AdminPanelEvents.SetPlayerArmorFromCef)]
        public void OnSetPlayerArmorEvent(Player admin, long staticId, int armor = 100) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var player = (Player)AltContext.GetCharacter(staticId);
                    NAPI.Task.Run(() => player.Armor = armor);
                    LogPlayer(admin, "SetArmor", $"Set armor to player with static ID {staticId}");
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerPosition)]
        [RemoteEvent(AdminPanelEvents.ChangeDimensionFromCef)]
        public void OnChangeDimensionEvent(Player admin, long staticId, uint dimension) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var player = (Player)AltContext.GetCharacter(staticId);
                    NAPI.Task.Run(() => player.Dimension = dimension);
                    LogPlayer(admin, "ChangeDimension", $"Change dimension to player with static ID {staticId}");
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerPosition)]
        [RemoteEvent(AdminPanelEvents.TeleportPlayerHereFromCef)]
        public void OnTeleportPlayerHereEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var player = (Player)AltContext.GetCharacter(staticId);
                    NAPI.Task.Run(() => player.Position = admin.Position);
                    LogPlayer(admin, "TeleportPlayer", $"Teleported player with static ID {staticId} to self");
                    OnChangeDimensionEvent(admin, staticId, admin.Dimension);
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerPosition)]
        [RemoteEvent(AdminPanelEvents.TeleportToPlayerFromCef)]
        public void OnTeleportToPlayerEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var player = (Player)AltContext.GetCharacter(staticId);
                    NAPI.Task.Run(() => admin.Position = player.Position);
                    LogPlayer(admin, "TeleportToPlayer", $"Teleported to player with static ID {staticId}");
                    OnChangeDimensionEvent(admin, staticId, player.Dimension);
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerPosition)]
        [RemoteEvent(AdminPanelEvents.TeleportPlayerToPointFromCef)]
        public void OnTeleportPlayerToPointEvent(Player admin, long staticId, string positionJson) =>
            CheckPermissionsAndExecute(
                admin,
                MethodBase.GetCurrentMethod()!,
                () => throw new NotImplementedException()
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerPosition)]
        [RemoteEvent(AdminPanelEvents.TeleportPlayerToLocationFromCef)]
        public void OnTeleportPlayerToLocationEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(
                admin,
                MethodBase.GetCurrentMethod()!,
                () => throw new NotImplementedException()
            );

        [NeedAdminRights(2)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerFinances)]
        [RemoteEvent(AdminPanelEvents.ChangePlayerMoneyFromCef)]
        public void OnChangePlayerMoneyEvent(Player admin, long staticId, long sum) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var character = AltContext.GetCharacter(staticId);
                    character.AddAmountToCash(admin.GetCharacter(), sum);
                    LogPlayer(admin, "ChangePlayersMoney", $"Change money of player with static ID {staticId}");
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerControl)]
        [RemoteEvent(AdminPanelEvents.TemporaryBanPlayerFromCef)]
        public void OnTemporaryBanPlayerEvent(Player admin, long staticId, int reason, long seconds = 0,
            string? message = null) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var account = AltContext.GetCharacter(staticId).Account;
                    var duration = TimeSpan.FromSeconds(seconds);
                    var ban = new TemporaryBan(duration, admin, account, (BanReason)reason, message);
                    account.Ban(ban);
                    LogPlayer(admin, "TemporaryBanPlayer",
                        $"Temporary ban player with static ID {staticId} for {duration} caused {reason}"
                    );
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerControl)]
        [RemoteEvent(AdminPanelEvents.PermanentBanPlayerFromCef)]
        public void OnPermanentBanPlayerEvent(Player admin, long staticId, int reason, string? message = null) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var account = AltContext.GetCharacter(staticId).Account;
                    var ban = new PermanentBan(admin, account, (BanReason)reason, message);
                    account.Ban(ban);
                    LogPlayer(admin, "PermanentBanPlayer",
                        $"Permanently ban player with static ID {staticId} caused {reason}"
                    );
                    ((Player)account).Ban(reason.ToString());
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerControl)]
        [RemoteEvent(AdminPanelEvents.MutePlayerFromCef)]
        public void OnMutePlayerEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(
                admin,
                MethodBase.GetCurrentMethod()!,
                () => throw new NotImplementedException()
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerOther)]
        [RemoteEvent(AdminPanelEvents.GetPlayerStatsFromCef)]
        public void OnGetPlayerStatsEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(
                admin,
                MethodBase.GetCurrentMethod()!,
                () => throw new NotImplementedException()
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerControl)]
        [RemoteEvent(AdminPanelEvents.SlapPlayerFromCef)]
        public void OnSlapPlayerEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var player = (Player)AltContext.GetCharacter(staticId);
                    NAPI.Task.Run(
                        () =>
                        {
                            AnimationManager.AnimationManager.StopAnimation(player);
                            player.WarpOutOfVehicle();
                            LogPlayer(admin, "SlapPlayer", $"Slap player with static ID {staticId}");
                        }
                    );
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerControl)]
        [RemoteEvent(AdminPanelEvents.GetPunishmentsFromCef)]
        public void OnGetPunishmentsEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(
                admin,
                MethodBase.GetCurrentMethod()!,
                () => throw new NotImplementedException()
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerOther)]
        [RemoteEvent(AdminPanelEvents.RepairCarFromCef)]
        public void OnRepairCarEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var player = (Player)AltContext.GetCharacter(staticId);
                    NAPI.Task.Run(() => player.Vehicle.Repair());
                    LogPlayer(admin, "RepairCar", $"Repair car to player with static ID {staticId}");
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerOther)]
        [RemoteEvent(AdminPanelEvents.GiveWeaponFromCef)]
        public void OnGetWeaponEvent(Player admin, long staticId, ulong weapon, int weaponAmmo = 5) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var player = (Player)AltContext.GetCharacter(staticId);
                    NAPI.Task.Run(() => player.GiveWeapon((WeaponHash)weapon, weaponAmmo));
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.PlayerOther)]
        [RemoteEvent(AdminPanelEvents.RemoveWeaponFromCef)]
        public void OnRemoveWeaponEvent(Player admin, long staticId) =>
            CheckPermissionsAndExecute(
                admin,
                MethodBase.GetCurrentMethod()!,
                () => throw new NotImplementedException()
            );

        #endregion

        #region Realty

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.RealtyHouseMethods, true)]
        [RemoteEvent(AdminPanelEvents.GetSingleEntrances)]
        public void OnGetSingleHouseEntrances(Player admin, int distance = -1) =>
            CheckPermissionsAndExecute(
                admin, 
                MethodBase.GetCurrentMethod()!, 
                () => SendEntrancesData(admin, RealtyEntranceType.Single, distance)
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.RealtyHouseMethods, true)]
        [RemoteEvent(AdminPanelEvents.GetMultipleEntrances)]
        public void OnGetMultipleHouseEntrances(Player admin, int distance = -1) =>
            CheckPermissionsAndExecute(
                admin, 
                MethodBase.GetCurrentMethod()!, 
                () => SendEntrancesData(admin, RealtyEntranceType.Multiple, distance)
            );

        private void SendEntrancesData(Player player, RealtyEntranceType type, int distance)
        {
            var entrances = AltContext.GetRealtyEntrances().Where(entrance => entrance.Type == type);
            if (distance > 0)
                entrances = entrances.Where(entrance => entrance.Position.DistanceTo2D(player.Position) < distance);
            var entrancesIds = entrances.Select(entrance => entrance.Id).ToList();
                    
            var settings = new JsonSerializerSettings
            {
                ContractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() },
                Formatting = Formatting.None
            };
            string entrancesJson = JsonConvert.SerializeObject(entrancesIds, settings);
                    
            CefConnect.TriggerRaw(
                player, 
                type == RealtyEntranceType.Single ?
                    AdminPanelEvents.GetSingleEntrances + "Answered" :
                    AdminPanelEvents.CreateMultipleEntrance + "Answered", 
                entrancesJson
            );
        }
        
        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.RealtyHouseMethods, true)]
        [RemoteEvent(AdminPanelEvents.GetHousePrototypes)]
        public void OnGetHousePrototypesEvent(Player admin) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var realtyPrototypes = AltContext
                        .GetRealtyPrototypes()
                        .Select(rp => new
                            {
                                Guid = rp.Id,
                                rp.Name,
                                rp.GovernmentPrice,
                                PriceSegment = rp.PriceSegment.ToString(),
                                rp.ParkingPlaces,
                            }
                        )
                        .ToList();
                    
                    var settings = new JsonSerializerSettings
                    {
                        ContractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() },
                        Formatting = Formatting.None
                    };
                    string realtyPrototypesJson = JsonConvert.SerializeObject(realtyPrototypes, settings);
                    
                    CefConnect.TriggerRaw(admin, AdminPanelEvents.GetHousePrototypes + "Answered", realtyPrototypesJson);
                }
            );
        
        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.RealtyHouseMethods)]
        [RemoteEvent(AdminPanelEvents.CreateSingleHouse)]
        public void OnCreateSingleHouseEvent(Player admin, string prototypeGuid, string positionJson) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var position = JsonConvert.DeserializeObject<Vector3>(positionJson);
                    var entrance = new RealtyEntrance(position, RealtyEntranceType.Single);
                    entrance.PushToContext();
                    
                    OnCreateRealty(admin, entrance.Id.ToString(), prototypeGuid);
                    
                    NAPI.Exported.RoomManager.SpawnEntrance(entrance);
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.RealtyHouseMethods)]
        [RemoteEvent(AdminPanelEvents.CreateMultipleEntrance)]
        public void OnCreateMultipleEntranceEvent(Player admin, string positionJson) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var position = JsonConvert.DeserializeObject<Vector3>(positionJson);
                    var entrance = new RealtyEntrance(position, RealtyEntranceType.Multiple);
                    entrance.PushToContext();
                    NAPI.Exported.RoomManager.SpawnEntrance(entrance);
                }
            );

        [NeedAdminRights(1)]
        [AutoGeneratedAdminPanelMethod(AdminEventType.RealtyHouseMethods)]
        [RemoteEvent(AdminPanelEvents.CreateRealty)]
        public void OnCreateRealty(Player admin, string entranceId, string prototypeId) =>
            CheckPermissionsAndExecute(admin, MethodBase.GetCurrentMethod()!, () =>
                {
                    var entrance = AltContext.GetRealtyEntrance(Guid.Parse(entranceId));
                    if (entrance.Type == RealtyEntranceType.Single && entrance.Realties.Count >= 1)
                    {
                        CefConnect.TriggerMessage(admin, MessageStatus.Error, "That entrance already has realty");
                        return;
                    }
                    var realtyPrototype = AltContext.GetRealtyPrototype(Guid.Parse(prototypeId));
                    var realty = new Realty(realtyPrototype, entrance);
                    realty.PushToContext();
                }
            );

        #endregion

    }
}